plugins {
    id "com.badlogicgames.gdx.gdx-jnigen"
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    testImplementation platform('org.junit:junit-bom:5.9.1')
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testRuntimeOnly fileTree(dir: file("build/libs/"), include: '*natives-desktop.jar')
    testImplementation project(":gdx-jnigen-runtime")
}


task copyTestFiles(type: Copy) {
    from("src/test/resources/")
    from(project(":gdx-jnigen-runtime").file("src/main/resources/"))
    into("jni/")
}

test {
    dependsOn(":gdx-jnigen-generator-test:jnigenBuild", ":gdx-jnigen-generator-test:jnigenJarNativesDesktop")
    useJUnitPlatform()
    outputs.upToDateWhen {false}
}

jnigen {
    sharedLibName = "test-natives"

    nativeCodeGenerator {
        it.sourceSet = sourceSets.named("test").get()
    }

    all {
        def name = it.os.name().toLowerCase()
        def arch = it.architecture.name().toLowerCase() + (it.architecture == x86 && it.bitness != x32 ? "_" : "") + it.bitness.toSuffix()
        def combined = name + "_" + arch

        headerDirs += [project(":gdx-jnigen-runtime").file("build/libffi-build/${combined}/include/"),
                       file("src/test/resources/").absolutePath]
        cFlags += " -std=c11 -fexceptions "
        cppFlags += " -std=c++11 -fexceptions "
        libraries += " ${project(":gdx-jnigen-runtime").file("build/libffi-build/${combined}/lib/libffi.a").absolutePath} "
    }

    generator {
        outputPath = file("src/test/java")
        basePackage = "com.badlogic.jnigen.generated"
        fileToParse = "test_data.h"
        options = ["-I" + file("src/test/resources/").absolutePath]
    }

    add(Linux)
    add(Linux, x32, ARM)
    add(Linux, x64)
    add(Linux, x64, ARM)
    add(Linux, x32, RISCV)
    add(Linux, x64, RISCV)
    add(Linux, x64, LOONGARCH)
    add(MacOsX, x64)
    add(MacOsX, x64, ARM)
    add(Windows)
    add(Windows, x64)
    add(Windows, x32, ARM)
    add(Windows, x64, ARM)
    add(Android)
}

tasks.named("jnigen").get().dependsOn(compileTestJava)
tasks.named("jnigen").get().dependsOn(copyTestFiles)
compileTestJava.dependsOn(":gdx-jnigen-generator-test:jnigenGenerateBindings")

jnigenJarNativesDesktop.mustRunAfter jnigenBuild

eclipse {
    project {
        name = "gdx-jnigen-generator-test"
    }
}
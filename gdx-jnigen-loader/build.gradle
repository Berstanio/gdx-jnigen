import java.nio.file.Files

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url("https://oss.sonatype.org/content/repositories/snapshots/") }
    }

    project.group = "THIS_IS_THE_DUMBEST_HACK"
    dependencies {
        classpath "com.badlogicgames.gdx:gdx-jnigen-gradle:2.5.1"
    }
}



plugins {
    id "de.undercouch.download" version "5.0.1"
}

apply plugin: "com.badlogicgames.gdx.gdx-jnigen"
project.group = "com.badlogicgames.gdx"

sourceCompatibility = 1.8
targetCompatibility = 1.8


dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.1'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testRuntimeOnly fileTree(dir: file("build/libs/"), include: '*natives-desktop.jar')
}

tasks.register("fetchLibFFI", Download) {
    src 'https://github.com/libffi/libffi/releases/download/v3.4.4/libffi-3.4.4.tar.gz'
    dest 'build/libFFI.tar.gz'
    onlyIfModified true
    useETag "all"
}

tasks.register("extractLibFFI", Copy) {
    doFirst {
        delete 'build/libFFI/'
        mkdir 'build/libFFI/'
    }
    dependsOn 'fetchLibFFI'
    from tarTree(resources.gzip('build/libFFI.tar.gz'))
    into 'build/libFFI/'
    eachFile { file ->
        file.path = file.relativePath.segments[1..-1].join('/')
    }
}

def createBuildTask(String platformName, String architecture, String specialFlags = "", List<String> specialArgs = []) {
    task("build_${platformName}_${architecture}") {
        dependsOn("extractLibFFI")
        doLast {
            def tmpDir = Files.createTempDirectory(platformName + "_" + architecture).resolve("libFFI")
            copy {
                from 'build/libFFI'
                into tmpDir
            }
            exec {
                workingDir = tmpDir.toFile()
                commandLine = "./configure"
                environment "CFLAGS", specialFlags
                environment "LDFLAGS", specialFlags
                args = ["--prefix=${new File(buildDir,  platformName + "_" + architecture)}"] + specialArgs
            }
            exec {
                workingDir = tmpDir.toFile()
                commandLine = "make"
                args = ["-j${Runtime.getRuntime().availableProcessors()}"]
            }
            exec {
                workingDir = tmpDir.toFile()
                commandLine = "make"
                args = ["install"]
            }
            delete tmpDir
        }
    }
}

task build_mac {
    dependsOn createBuildTask("macosx", "arm64", "-arch arm64", ["--host=arm64-apple-darwin"])
    dependsOn createBuildTask("macosx", "x86_64", "-arch x86_64", ["--host=x86_64-apple-darwin"])
}

task build_linux {
    dependsOn createBuildTask("linux", "x86", "-fPIC", ["--host=i686-linux-gnu"])
    dependsOn createBuildTask("linux", "x86_64", "-fPIC", ["--host=x86_64-linux-gnu"])
    dependsOn createBuildTask("linux", "arm", "-fPIC", ["--host=arm-linux-gnueabihf"])
    dependsOn createBuildTask("linux", "arm64", "-fPIC", ["--host=aarch64-linux-gnu"])
}

task build_windows {
    dependsOn createBuildTask("windows", "x86", "", ["--host=i686-w64-mingw32"])
    dependsOn createBuildTask("windows", "x86_64", "", ["--host=x86_64-w64-mingw32"])
    dependsOn createBuildTask("windows", "arm", "", ["--host=armv7-w64-mingw32"])
    dependsOn createBuildTask("windows", "arm64", "", ["--host=aarch64-w64-mingw32"])
}

test {
    dependsOn("jnigenBuild", "jnigenJarNativesDesktop")
    useJUnitPlatform()
    outputs.upToDateWhen {false}
}

jnigen {
    sharedLibName = "jnigen-native"

    all {
        def name = it.os.name().toLowerCase()
        def arch = it.architecture.name().toLowerCase() + (it.architecture == x86 && it.bitness != x32 ? "_" : "") + it.bitness.toSuffix()
        def combined = name + "_" + arch
        headerDirs += [file("build/${combined}/include/"), file("src/main/resources/")]
        libraries += "${file("build/${combined}/lib/libffi.a").absolutePath}"
        cFlags += " -std=c11 "
        cppFlags += " -std=c++11 "
    }

    add(Linux)
    add(Linux, x32, ARM)
    add(Linux, x64)
    add(Linux, x64, ARM)
    add(MacOsX, x64, ARM)
}

jnigenJarNativesDesktop.mustRunAfter jnigenBuild


eclipse {
    project {
        name = "gdx-jnigen-loader"
    }
}
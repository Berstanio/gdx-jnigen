buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url("https://oss.sonatype.org/content/repositories/snapshots/") }
    }

    dependencies {
        classpath "com.badlogicgames.gdx:gdx-jnigen-gradle:2.5.1"
    }
}

plugins {
    id 'java'
}

apply plugin: "com.badlogicgames.gdx.gdx-jnigen"

group = 'com.badlogicgames.gdx'
version = '2.5.1'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.bytedeco:llvm-platform:16.0.4-1.5.9'
    implementation 'com.github.javaparser:javaparser-core:3.25.9'
    implementation project(':gdx-jnigen-loader')
    testImplementation platform('org.junit:junit-bom:5.9.1')
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testRuntimeOnly fileTree(dir: project(':gdx-jnigen-loader').file("build/libs/"), include: '*natives-desktop.jar')
    testRuntimeOnly fileTree(dir: file("build/libs/"), include: '*natives-desktop.jar')
}

task generateTestClasses(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    mainClass = "com.badlogic.gdx.jnigen.generator.Generator"
    args file("src/test/java").absolutePath, "com.badlogic.jnigen.generated", "test_data.h" ,"-I" + file("src/test/resources/").absolutePath
}

task copyTestFiles(type: Copy) {
    from("src/test/resources/")
    into("jni/")
}

test {
    dependsOn(":gdx-jnigen-loader:jnigenBuild", ":gdx-jnigen-generator:jnigenBuild", ":gdx-jnigen-loader:jnigenJarNativesDesktop", ":gdx-jnigen-generator:jnigenJarNativesDesktop")
    useJUnitPlatform()
    outputs.upToDateWhen {false}
}

jnigen {
    sharedLibName = "test-natives"

    nativeCodeGenerator {
        it.sourceSet = sourceSets.named("test").get()
    }

    all {
        headerDirs += [project(":gdx-jnigen-loader").file("src/main/resources/").absolutePath, file("src/test/resources/").absolutePath]
        cFlags += " -std=c11 -fexceptions "
        cppFlags += " -std=c++11 -fexceptions "
        linkerFlags += " -undefined dynamic_lookup "
    }

    add(Linux)
    add(Linux, x32, ARM)
    add(Linux, x64)
    add(Linux, x64, ARM)
    add(Linux, x32, RISCV)
    add(Linux, x64, RISCV)
    add(Linux, x64, LOONGARCH)
    add(MacOsX, x64)
    add(MacOsX, x64, ARM)
    add(Windows)
    add(Windows, x64)
    add(Windows, x32, ARM)
    add(Windows, x64, ARM)
    add(IOS)
    add(Android)
}
tasks.named("jnigen").get().dependsOn(compileTestJava)
tasks.named("jnigen").get().dependsOn(copyTestFiles)
compileTestJava.dependsOn(generateTestClasses)

jnigenJarNativesDesktop.mustRunAfter jnigenBuild